source('C:/code/pml/ml.R')
setwd("C:/code/pml")
source('C:/code/pml/ml.R')
View(training)
names(testing)
t <- testing[,c(1,2,3)]
t
dim(t)
t$X <- NULL
t
dim(t)
t <- na.omit(testing)
dim(t)
t <- testing[,colSums(is.na(testing)) == 0]
dim(t)
names(t)
t <- testing[,colSums(testing=="") == 0]
colSums(testing==0)
dim(t)
colSums(t==0)
t <- testing[,colSums(t=="") == 0]
dim(t)
t <- testing[,colSums(is.na(testing)) == 0]
dim(t)
t <- t[,colSums(t=="") == 0]
dim(t)
colSums(t=="")
View(t)
source('~/.active-rstudio-document')
View(t)
dim(clean_data)
View(clean_data)
sum(is.na(clean_data))
sum(clean_data==NULL)
sum(clean_data=="")
factor(clean_data$classe)
dim(clean_data)
library(caret)
library(caTools)
m = colAUC(clean_data[,-60],clean_data[,60])
is.numeric(clean_data[,1])
is.numeric(clean_data[,2])
d = dim(clean_data)
for (i in 1:d[2])
{
if(!is.numeric(clean_data[,i]))
{
print("delete")
}
}
d = dim(clean_data)
for (i in 1:d[2])
{
if(!is.numeric(clean_data[,i]))
{
print(i)
}
}
setwd("C:/code/pml")
source('~/.active-rstudio-document')
clean_data <- training[,colSums(is.na(training)) == 0]
clean_data <- clean_data[,colSums(clean_data=='')==0]
d = dim(clean_data)
for (i in 1:d[2])
{
if(!is.numeric(clean_data[,i]))
{
clean_data[i] <- NULL
}
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
clean_data[2] <- NULL
l = c()
source('~/.active-rstudio-document')
lst
data <- clean_data[,-lst]
dim(data)
library(randomForest)
dim(data)
cols = names(data)
t = testing[,cols]
dim(t)
source('~/.active-rstudio-document')
dim(data)
correlationMatrix <- cor(data[,-57])
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
print(highlyCorrelated)
print(correlationMatrix)
print(highlyCorrelated)
length(highlyCorrelated)
data = clean_data[,-lst]
cols = names(data)
correlationMatrix <- cor(data[,-57])
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
print(highlyCorrelated)
length(highlyCorrelated)
highlyCorrelated
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.8)
print(highlyCorrelated)
length(highlyCorrelated)
prep = preprocess(data,method=c("center","scale","medianImpute"))
prep = prepPocess(data,method=c("center","scale","medianImpute"))
prep = preProcess(data,method=c("center","scale","medianImpute"))
prep = preProcess(data[,-57],method=c("center","scale","medianImpute"))
cdata = predict(prep,data)
cdata = predict(prep,newdata = data)
prep = preProcess(data[,-57],method=c("center","scale"))
cdata = predict(prep,newdata = data)
cdata = predict(prep,newdata = data[,57])
cdata = predict(prep,newdata = data[,-57])
ndata = clean_data[,-lst]
cols = names(data)
cols = names(ndata)
View(ndata)
model = train(classe ~.,data=ndata,method="rf")
source('C:/code/pml/ml.R')
install.packages("doParallel")
source('C:/code/pml/ml.R')
stopCluster(cl)
shd = ndata[sample(1:d[1],200),]
shd = ndata[sample(1:d[1],2000),]
model = train(classe ~.,data=ndata,method="rf")
stopCluster(cl)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl, cores = detectCores() - 1)
shd = ndata[sample(1:d[1],2000),]
model = train(classe ~.,data=ndata,method="rf")
stopCluster(cl)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl, cores = detectCores() - 1)
shd = ndata[sample(1:d[1],2000),]
model = train(classe ~.,data=shd,method="rf")
stopCluster(cl)
pred = predict(model)
pred
pred = predict(model,newdata = testing)
pred
View(testing)
View(training)
testing[,20]
testing[,160]
training[,160]
d[1]
source('~/.active-rstudio-document')
pred
source('~/.active-rstudio-document')
pred
model = train(classe ~.,data=shd,method="rf")
shd = ndata[sample(100:d[1],200),]
source('~/.active-rstudio-document')
pred
source('~/.active-rstudio-document')
stopCluster(cl)
source('C:/code/pml/ml.R')
pred
source('~/.active-rstudio-document')
pred
model
summary(pred)
print(model)
model$confusion
model$type
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
model$confusion
pred
model$err.rate
source('~/.active-rstudio-document')
model$results
fit = model$bestTune
predict(fit,testing)
fit
fit = model$finalModel
predict(fit,testing)
predict(fit,newdata=testing)
model$metric
model
source('~/.active-rstudio-document')
pred
source('~/.active-rstudio-document')
pred
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
pred
source('~/.active-rstudio-document')
stopCluster(cl)
source('C:/code/pml/ml.R')
pred
View(ndata)
source('C:/code/pml/ml.R')
predi = predict(model,newdata = testing[,cols])
model$confusion
predi = predict(model,newdata = testing)
model$mse
model$err.rate
varimp(model)
varImp(model)
source('~/.active-rstudio-document')
predi
head(training[,lst])
model$confusion
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
typeof(predi)
prd = as.character(predi)
prd
pml_write_files(prd)
d
source('~/.active-rstudio-document')
View(testing)
View(testing)
View(testing)
testing <- read.csv('pml-testing.csv',header = T)
View(testing)
library(caret)
library(parallel)
library(doParallel)
training <- read.csv('pml-training.csv',header=T)
testing <- read.csv('pml-testing.csv',header = T)
View(testing)
clean_data <- training[,colSums(is.na(training)) == 0]
clean_data <- clean_data[,colSums(clean_data=="")== 0]
d = dim(clean_data)
lst = c()
for (i in 1:(d[2]-1))
{
if(!is.numeric(clean_data[,i]))
{
lst = c(lst,i)
}
}
lst
ndata = clean_data[,-lst]
cols = names(ndata)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl, cores = detectCores() - 1)
#train_control <- trainControl(method="cv", number=10)
model = randomForest(classe ~.,data=ndata)
stopCluster(cl)
predi = predict(model,newdata = testing)
library(randomForest)
stopCluster(cl)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl, cores = detectCores() - 1)
model = randomForest(classe ~.,data=ndata)
View(training)
stopCluster(cl)
predi = predict(model,newdata = testing)
predi
ndata$X <- NULL
cols = names(ndata)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl, cores = detectCores() - 1)
#train_control <- trainControl(method="cv", number=10)
model = randomForest(classe ~.,data=ndata)
stopCluster(cl)
predi = predict(model,newdata = testing)
predi
preds = as.character(predi)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
preds
pml_write_files(preds)
varImp(model)
varImp(model)
names(ndata)
View(training)
model$confusion
library(randomForest)
library(randomForest)
training <- read.csv('pml-training.csv',header=T)
print(dim(training))
training = read.csv('pml-training.csv',header=T)
training = read.csv('pml-training.csv',header=T)
setwd("C:/code/pml/practical_ml")
setwd("C:/code/pml/practical_ml")
